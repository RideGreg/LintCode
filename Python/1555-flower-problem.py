# Time: O(n)
# Space: O(n)

# There is a garden with N slots. In each slot, there is a flower. The N flowers will bloom one by one
# in N days. In each day, exactly one flower blooms and it will be in the status of blooming since then.
#
# Given an array flowers consists of number from 1 to N. Each number in the array represents the
# place where the flower will open in that day.
#
# For example, flowers[i] = x means that the unique flower that blooms at day i will be at
# position x, where i and x will be in the range from 1 to N.
#
# Given parameters m and k, find the last day when there are at least m groups flowering at the same time
# (each group has at least k plots). If there isn't such day, output -1. Blooming flowers close
# to each other forms a group.

# Solution: Union-Find (group is separate sub-array)

class Solution:
    """
    @param flowers: an array
    @param k: an integer
    @param m: an integer
    @return: the last day
    """
    def flowerProblem(self, flowers, k, m):
        def find(i):
            if root[i] != i:
                root[i] = find(root[i])
            return root[i]

        def union(i, j):
            rooti, rootj = map(find, [i, j])
            if rooti != rootj:
                root[rooti] = rootj

                if groups[rooti] >= self.K and groups[rootj] >= self.K:
                    self.count -= 1
                elif groups[rooti] < self.K and groups[rootj] < self.K \
                    and groups[rooti] + groups[rootj] >= self.K:
                    self.count += 1
                groups[rootj] += groups[rooti] # no need to delete rooti from groups, it won't be used any more

        def bloom(i):
            return True if 0<=i<n and root[i] != -1 else False

        n = len(flowers)
        # These error checking is not required, just for speedup
        if m == 0 or (m == 1 and k <= n):
            return n
        if k > n:
            return -1

        root, ans = [-1] * n, -1
        groups = {} # key is the root elem in the group, value is the length of this group
        self.count = 0 # number of groups meet requirement (length >= k)
        self.K = k

        for i, f in enumerate(flowers):
            f -= 1
            root[f] = f
            groups[f] = 1
            if k <= 1:
                self.count += 1

            # smart, covers all 3 cases: left bloom, right bloom, left and right bloom
            if bloom(f-1):
                union(f, f-1)
            if bloom(f+1):
                union(f, f+1)

            #if sum(1 for i in groups.values() if i >= k) >= m: # this causes TLE
            if self.count >= m:
                ans = max(ans, i+1)

        return ans

print(Solution().flowerProblem([900,18,758,466,476,245,696,79,262,81,159,122,827,704,111,672,458,482,509,984,309,678,185,412,788,775,37,923,715,649,102,293,981,512,942,943,270,403,431,980,947,376,592,994,983,112,178,420,683,429,457,754,881,711,164,488,23,17,749,529,478,280,504,674,547,370,718,168,71,25,203,148,318,53,783,986,790,230,579,34,668,737,347,940,750,856,421,498,394,131,768,352,176,377,60,5,689,331,70,705,175,549,895,411,726,139,915,580,838,584,679,496,952,133,839,872,428,999,231,13,510,869,330,439,857,430,810,734,552,126,499,748,221,537,321,708,484,56,296,62,471,566,345,118,741,658,213,560,955,9,359,153,902,622,422,397,835,367,123,240,89,452,759,933,799,690,313,910,393,930,998,275,322,187,889,851,386,12,180,408,996,970,899,69,808,713,528,709,859,39,142,329,543,723,121,818,453,651,184,140,781,731,918,357,160,879,210,949,545,93,583,914,883,291,598,381,54,599,635,526,474,427,802,199,332,401,259,200,424,456,182,920,490,755,624,105,527,667,960,524,273,4,966,103,815,590,324,586,990,833,989,777,660,44,536,954,837,646,120,675,946,146,963,127,86,993,418,286,617,631,441,795,214,597,374,779,821,854,171,995,157,648,803,373,753,468,897,129,305,967,20,931,976,268,532,243,80,673,413,864,627,279,307,544,928,873,661,721,780,962,606,287,108,232,219,567,987,831,793,85,637,75,861,958,267,941,497,796,355,284,655,774,467,51,66,691,736,698,247,956,785,444,847,659,945,170,515,634,794,822,891,405,465,727,911,326,728,894,735,636,87,582,765,870,542,8,681,340,614,399,632,315,83,885,419,784,266,317,154,767,396,29,95,985,518,298,218,824,462,616,561,645,252,300,480,134,613,310,193,916,241,706,538,483,384,204,874,314,435,975,2,992,554,216,641,90,663,249,362,63,880,666,848,610,172,747,686,756,771,492,820,94,682,581,166,461,612,929,335,511,285,609,448,433,473,563,152,31,937,855,797,573,343,752,519,1,909,238,350,908,866,42,745,387,116,316,938,604,251,587,725,10,961,189,893,463,644,541,842,48,82,957,816,517,410,603,194,195,585,432,190,26,106,757,388,733,3,379,206,714,677,591,155,136,978,531,237,177,786,27,717,186,787,629,398,196,198,670,766,553,776,692,652,192,743,494,97,917,865,832,360,904,812,760,7,716,334,508,64,491,876,647,308,520,328,809,77,514,281,828,540,618,485,830,913,323,295,258,665,366,694,530,257,72,143,434,844,829,423,149,390,475,557,145,934,700,852,506,207,642,132,926,936,88,378,445,919,246,589,294,697,15,805,907,292,486,220,353,208,303,144,201,925,455,534,738,400,965,1000,222,438,169,22,451,578,693,927,628,858,242,402,556,385,770,564,225,234,68,256,191,101,890,932,415,233,375,699,906,729,523,867,92,685,562,302,158,791,684,605,826,104,742,570,472,878,944,107,74,130,801,271,78,887,289,36,551,276,255,442,654,349,447,265,147,98,163,703,701,383,669,695,161,939,746,814,125,333,417,223,656,772,299,449,550,274,150,558,197,65,724,633,959,846,6,546,722,253,982,115,836,841,650,568,217,73,312,905,988,325,565,863,282,707,997,600,964,354,40,896,625,389,167,811,227,507,688,264,361,823,764,882,977,99,868,52,505,277,365,338,128,202,96,369,110,849,548,162,643,953,951,871,804,819,513,304,346,969,32,59,991,817,901,769,67,188,19,137,228,319,862,539,446,676,884,43,141,76,535,414,710,762,687,608,342,49,607,575,639,559,798,495,124,440,138,28,481,327,109,348,100,239,596,261,657,912,38,588,156,974,619,888,935,533,638,236,211,845,248,84,41,626,443,320,973,339,621,24,924,226,922,301,834,459,807,516,358,356,664,179,174,311,853,272,404,61,702,363,450,594,290,114,792,825,671,730,372,380,425,680,503,620,278,712,16,351,336,14,850,371,595,91,576,117,135,306,640,843,151,212,601,183,950,341,47,751,113,572,602,501,763,21,653,30,948,50,205,250,623,630,739,470,979,972,720,593,903,898,892,437,574,813,719,392,555,454,382,224,469,269,229,886,215,364,391,406,344,119,436,489,773,165,782,11,502,789,740,45,288,662,522,46,337,875,477,58,260,181,615,209,460,297,33,877,493,732,283,173,487,500,840,611,426,409,778,761,395,235,368,860,263,254,800,577,971,479,968,57,744,55,244,571,464,521,806,525,35,407,921,569,416],
5, 26)) # 970
print(Solution().flowerProblem([1, 3, 2], 1, 2)) # 2
print(Solution().flowerProblem([1, 2, 4, 5, 3, 7, 8, 6], 2, 2)) # 7